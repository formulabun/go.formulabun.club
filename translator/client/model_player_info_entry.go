/*
Translator service between a srb2kart server and json

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlayerInfoEntry struct for PlayerInfoEntry
type PlayerInfoEntry struct {
	Node *float32 `json:"Node,omitempty"`
	Name *string `json:"Name,omitempty"`
	Address []float32 `json:"Address,omitempty"`
	Team *float32 `json:"Team,omitempty"`
	Skin *float32 `json:"Skin,omitempty"`
	Data *float32 `json:"Data,omitempty"`
	Score *float32 `json:"Score,omitempty"`
	TimeInServer *float32 `json:"TimeInServer,omitempty"`
}

// NewPlayerInfoEntry instantiates a new PlayerInfoEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerInfoEntry() *PlayerInfoEntry {
	this := PlayerInfoEntry{}
	return &this
}

// NewPlayerInfoEntryWithDefaults instantiates a new PlayerInfoEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerInfoEntryWithDefaults() *PlayerInfoEntry {
	this := PlayerInfoEntry{}
	return &this
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *PlayerInfoEntry) GetNode() float32 {
	if o == nil || o.Node == nil {
		var ret float32
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfoEntry) GetNodeOk() (*float32, bool) {
	if o == nil || o.Node == nil {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *PlayerInfoEntry) HasNode() bool {
	if o != nil && o.Node != nil {
		return true
	}

	return false
}

// SetNode gets a reference to the given float32 and assigns it to the Node field.
func (o *PlayerInfoEntry) SetNode(v float32) {
	o.Node = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlayerInfoEntry) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfoEntry) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlayerInfoEntry) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlayerInfoEntry) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PlayerInfoEntry) GetAddress() []float32 {
	if o == nil || o.Address == nil {
		var ret []float32
		return ret
	}
	return o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfoEntry) GetAddressOk() ([]float32, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PlayerInfoEntry) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given []float32 and assigns it to the Address field.
func (o *PlayerInfoEntry) SetAddress(v []float32) {
	o.Address = v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *PlayerInfoEntry) GetTeam() float32 {
	if o == nil || o.Team == nil {
		var ret float32
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfoEntry) GetTeamOk() (*float32, bool) {
	if o == nil || o.Team == nil {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *PlayerInfoEntry) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given float32 and assigns it to the Team field.
func (o *PlayerInfoEntry) SetTeam(v float32) {
	o.Team = &v
}

// GetSkin returns the Skin field value if set, zero value otherwise.
func (o *PlayerInfoEntry) GetSkin() float32 {
	if o == nil || o.Skin == nil {
		var ret float32
		return ret
	}
	return *o.Skin
}

// GetSkinOk returns a tuple with the Skin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfoEntry) GetSkinOk() (*float32, bool) {
	if o == nil || o.Skin == nil {
		return nil, false
	}
	return o.Skin, true
}

// HasSkin returns a boolean if a field has been set.
func (o *PlayerInfoEntry) HasSkin() bool {
	if o != nil && o.Skin != nil {
		return true
	}

	return false
}

// SetSkin gets a reference to the given float32 and assigns it to the Skin field.
func (o *PlayerInfoEntry) SetSkin(v float32) {
	o.Skin = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PlayerInfoEntry) GetData() float32 {
	if o == nil || o.Data == nil {
		var ret float32
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfoEntry) GetDataOk() (*float32, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PlayerInfoEntry) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given float32 and assigns it to the Data field.
func (o *PlayerInfoEntry) SetData(v float32) {
	o.Data = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *PlayerInfoEntry) GetScore() float32 {
	if o == nil || o.Score == nil {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfoEntry) GetScoreOk() (*float32, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *PlayerInfoEntry) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *PlayerInfoEntry) SetScore(v float32) {
	o.Score = &v
}

// GetTimeInServer returns the TimeInServer field value if set, zero value otherwise.
func (o *PlayerInfoEntry) GetTimeInServer() float32 {
	if o == nil || o.TimeInServer == nil {
		var ret float32
		return ret
	}
	return *o.TimeInServer
}

// GetTimeInServerOk returns a tuple with the TimeInServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfoEntry) GetTimeInServerOk() (*float32, bool) {
	if o == nil || o.TimeInServer == nil {
		return nil, false
	}
	return o.TimeInServer, true
}

// HasTimeInServer returns a boolean if a field has been set.
func (o *PlayerInfoEntry) HasTimeInServer() bool {
	if o != nil && o.TimeInServer != nil {
		return true
	}

	return false
}

// SetTimeInServer gets a reference to the given float32 and assigns it to the TimeInServer field.
func (o *PlayerInfoEntry) SetTimeInServer(v float32) {
	o.TimeInServer = &v
}

func (o PlayerInfoEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Node != nil {
		toSerialize["Node"] = o.Node
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Address != nil {
		toSerialize["Address"] = o.Address
	}
	if o.Team != nil {
		toSerialize["Team"] = o.Team
	}
	if o.Skin != nil {
		toSerialize["Skin"] = o.Skin
	}
	if o.Data != nil {
		toSerialize["Data"] = o.Data
	}
	if o.Score != nil {
		toSerialize["Score"] = o.Score
	}
	if o.TimeInServer != nil {
		toSerialize["TimeInServer"] = o.TimeInServer
	}
	return json.Marshal(toSerialize)
}

type NullablePlayerInfoEntry struct {
	value *PlayerInfoEntry
	isSet bool
}

func (v NullablePlayerInfoEntry) Get() *PlayerInfoEntry {
	return v.value
}

func (v *NullablePlayerInfoEntry) Set(val *PlayerInfoEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerInfoEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerInfoEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerInfoEntry(val *PlayerInfoEntry) *NullablePlayerInfoEntry {
	return &NullablePlayerInfoEntry{value: val, isSet: true}
}

func (v NullablePlayerInfoEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerInfoEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


