/*
Translator service between a srb2kart server and json

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlayerInfo struct for PlayerInfo
type PlayerInfo struct {
	PlayerInfo []PlayerInfoEntry `json:"PlayerInfo,omitempty"`
}

// NewPlayerInfo instantiates a new PlayerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerInfo() *PlayerInfo {
	this := PlayerInfo{}
	return &this
}

// NewPlayerInfoWithDefaults instantiates a new PlayerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerInfoWithDefaults() *PlayerInfo {
	this := PlayerInfo{}
	return &this
}

// GetPlayerInfo returns the PlayerInfo field value if set, zero value otherwise.
func (o *PlayerInfo) GetPlayerInfo() []PlayerInfoEntry {
	if o == nil || o.PlayerInfo == nil {
		var ret []PlayerInfoEntry
		return ret
	}
	return o.PlayerInfo
}

// GetPlayerInfoOk returns a tuple with the PlayerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerInfo) GetPlayerInfoOk() ([]PlayerInfoEntry, bool) {
	if o == nil || o.PlayerInfo == nil {
		return nil, false
	}
	return o.PlayerInfo, true
}

// HasPlayerInfo returns a boolean if a field has been set.
func (o *PlayerInfo) HasPlayerInfo() bool {
	if o != nil && o.PlayerInfo != nil {
		return true
	}

	return false
}

// SetPlayerInfo gets a reference to the given []PlayerInfoEntry and assigns it to the PlayerInfo field.
func (o *PlayerInfo) SetPlayerInfo(v []PlayerInfoEntry) {
	o.PlayerInfo = v
}

func (o PlayerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PlayerInfo != nil {
		toSerialize["PlayerInfo"] = o.PlayerInfo
	}
	return json.Marshal(toSerialize)
}

type NullablePlayerInfo struct {
	value *PlayerInfo
	isSet bool
}

func (v NullablePlayerInfo) Get() *PlayerInfo {
	return v.value
}

func (v *NullablePlayerInfo) Set(val *PlayerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerInfo(val *PlayerInfo) *NullablePlayerInfo {
	return &NullablePlayerInfo{value: val, isSet: true}
}

func (v NullablePlayerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


