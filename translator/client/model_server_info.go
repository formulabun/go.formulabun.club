/*
Translator service between a srb2kart server and json

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServerInfo struct for ServerInfo
type ServerInfo struct {
	PacketVersion *float32 `json:"PacketVersion,omitempty"`
	Application []float32 `json:"Application,omitempty"`
	Version *float32 `json:"Version,omitempty"`
	SubVersion *float32 `json:"SubVersion,omitempty"`
	NumberOfPlayer *float32 `json:"NumberOfPlayer,omitempty"`
	MaxPlayers *float32 `json:"MaxPlayers,omitempty"`
	GameType *float32 `json:"GameType,omitempty"`
	ModifiedGame *bool `json:"ModifiedGame,omitempty"`
	CheatsEnabled *bool `json:"CheatsEnabled,omitempty"`
	KartVars *float32 `json:"KartVars,omitempty"`
	FileNeededNum *float32 `json:"FileNeededNum,omitempty"`
	Time *float32 `json:"Time,omitempty"`
	LevelTime *float32 `json:"LevelTime,omitempty"`
	ServerNameRaw *string `json:"ServerNameRaw,omitempty"`
	ServerName *string `json:"ServerName,omitempty"`
	MapName *string `json:"MapName,omitempty"`
	MapTitle *string `json:"MapTitle,omitempty"`
	MapMD5 []float32 `json:"MapMD5,omitempty"`
	ActNum *float32 `json:"ActNum,omitempty"`
	IsZone *float32 `json:"IsZone,omitempty"`
	HttpSource *string `json:"HttpSource,omitempty"`
	FileNeeded []FileNeededInner `json:"FileNeeded,omitempty"`
}

// NewServerInfo instantiates a new ServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInfo() *ServerInfo {
	this := ServerInfo{}
	return &this
}

// NewServerInfoWithDefaults instantiates a new ServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInfoWithDefaults() *ServerInfo {
	this := ServerInfo{}
	return &this
}

// GetPacketVersion returns the PacketVersion field value if set, zero value otherwise.
func (o *ServerInfo) GetPacketVersion() float32 {
	if o == nil || o.PacketVersion == nil {
		var ret float32
		return ret
	}
	return *o.PacketVersion
}

// GetPacketVersionOk returns a tuple with the PacketVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetPacketVersionOk() (*float32, bool) {
	if o == nil || o.PacketVersion == nil {
		return nil, false
	}
	return o.PacketVersion, true
}

// HasPacketVersion returns a boolean if a field has been set.
func (o *ServerInfo) HasPacketVersion() bool {
	if o != nil && o.PacketVersion != nil {
		return true
	}

	return false
}

// SetPacketVersion gets a reference to the given float32 and assigns it to the PacketVersion field.
func (o *ServerInfo) SetPacketVersion(v float32) {
	o.PacketVersion = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *ServerInfo) GetApplication() []float32 {
	if o == nil || o.Application == nil {
		var ret []float32
		return ret
	}
	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetApplicationOk() ([]float32, bool) {
	if o == nil || o.Application == nil {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *ServerInfo) HasApplication() bool {
	if o != nil && o.Application != nil {
		return true
	}

	return false
}

// SetApplication gets a reference to the given []float32 and assigns it to the Application field.
func (o *ServerInfo) SetApplication(v []float32) {
	o.Application = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServerInfo) GetVersion() float32 {
	if o == nil || o.Version == nil {
		var ret float32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetVersionOk() (*float32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ServerInfo) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float32 and assigns it to the Version field.
func (o *ServerInfo) SetVersion(v float32) {
	o.Version = &v
}

// GetSubVersion returns the SubVersion field value if set, zero value otherwise.
func (o *ServerInfo) GetSubVersion() float32 {
	if o == nil || o.SubVersion == nil {
		var ret float32
		return ret
	}
	return *o.SubVersion
}

// GetSubVersionOk returns a tuple with the SubVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetSubVersionOk() (*float32, bool) {
	if o == nil || o.SubVersion == nil {
		return nil, false
	}
	return o.SubVersion, true
}

// HasSubVersion returns a boolean if a field has been set.
func (o *ServerInfo) HasSubVersion() bool {
	if o != nil && o.SubVersion != nil {
		return true
	}

	return false
}

// SetSubVersion gets a reference to the given float32 and assigns it to the SubVersion field.
func (o *ServerInfo) SetSubVersion(v float32) {
	o.SubVersion = &v
}

// GetNumberOfPlayer returns the NumberOfPlayer field value if set, zero value otherwise.
func (o *ServerInfo) GetNumberOfPlayer() float32 {
	if o == nil || o.NumberOfPlayer == nil {
		var ret float32
		return ret
	}
	return *o.NumberOfPlayer
}

// GetNumberOfPlayerOk returns a tuple with the NumberOfPlayer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetNumberOfPlayerOk() (*float32, bool) {
	if o == nil || o.NumberOfPlayer == nil {
		return nil, false
	}
	return o.NumberOfPlayer, true
}

// HasNumberOfPlayer returns a boolean if a field has been set.
func (o *ServerInfo) HasNumberOfPlayer() bool {
	if o != nil && o.NumberOfPlayer != nil {
		return true
	}

	return false
}

// SetNumberOfPlayer gets a reference to the given float32 and assigns it to the NumberOfPlayer field.
func (o *ServerInfo) SetNumberOfPlayer(v float32) {
	o.NumberOfPlayer = &v
}

// GetMaxPlayers returns the MaxPlayers field value if set, zero value otherwise.
func (o *ServerInfo) GetMaxPlayers() float32 {
	if o == nil || o.MaxPlayers == nil {
		var ret float32
		return ret
	}
	return *o.MaxPlayers
}

// GetMaxPlayersOk returns a tuple with the MaxPlayers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetMaxPlayersOk() (*float32, bool) {
	if o == nil || o.MaxPlayers == nil {
		return nil, false
	}
	return o.MaxPlayers, true
}

// HasMaxPlayers returns a boolean if a field has been set.
func (o *ServerInfo) HasMaxPlayers() bool {
	if o != nil && o.MaxPlayers != nil {
		return true
	}

	return false
}

// SetMaxPlayers gets a reference to the given float32 and assigns it to the MaxPlayers field.
func (o *ServerInfo) SetMaxPlayers(v float32) {
	o.MaxPlayers = &v
}

// GetGameType returns the GameType field value if set, zero value otherwise.
func (o *ServerInfo) GetGameType() float32 {
	if o == nil || o.GameType == nil {
		var ret float32
		return ret
	}
	return *o.GameType
}

// GetGameTypeOk returns a tuple with the GameType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetGameTypeOk() (*float32, bool) {
	if o == nil || o.GameType == nil {
		return nil, false
	}
	return o.GameType, true
}

// HasGameType returns a boolean if a field has been set.
func (o *ServerInfo) HasGameType() bool {
	if o != nil && o.GameType != nil {
		return true
	}

	return false
}

// SetGameType gets a reference to the given float32 and assigns it to the GameType field.
func (o *ServerInfo) SetGameType(v float32) {
	o.GameType = &v
}

// GetModifiedGame returns the ModifiedGame field value if set, zero value otherwise.
func (o *ServerInfo) GetModifiedGame() bool {
	if o == nil || o.ModifiedGame == nil {
		var ret bool
		return ret
	}
	return *o.ModifiedGame
}

// GetModifiedGameOk returns a tuple with the ModifiedGame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetModifiedGameOk() (*bool, bool) {
	if o == nil || o.ModifiedGame == nil {
		return nil, false
	}
	return o.ModifiedGame, true
}

// HasModifiedGame returns a boolean if a field has been set.
func (o *ServerInfo) HasModifiedGame() bool {
	if o != nil && o.ModifiedGame != nil {
		return true
	}

	return false
}

// SetModifiedGame gets a reference to the given bool and assigns it to the ModifiedGame field.
func (o *ServerInfo) SetModifiedGame(v bool) {
	o.ModifiedGame = &v
}

// GetCheatsEnabled returns the CheatsEnabled field value if set, zero value otherwise.
func (o *ServerInfo) GetCheatsEnabled() bool {
	if o == nil || o.CheatsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.CheatsEnabled
}

// GetCheatsEnabledOk returns a tuple with the CheatsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetCheatsEnabledOk() (*bool, bool) {
	if o == nil || o.CheatsEnabled == nil {
		return nil, false
	}
	return o.CheatsEnabled, true
}

// HasCheatsEnabled returns a boolean if a field has been set.
func (o *ServerInfo) HasCheatsEnabled() bool {
	if o != nil && o.CheatsEnabled != nil {
		return true
	}

	return false
}

// SetCheatsEnabled gets a reference to the given bool and assigns it to the CheatsEnabled field.
func (o *ServerInfo) SetCheatsEnabled(v bool) {
	o.CheatsEnabled = &v
}

// GetKartVars returns the KartVars field value if set, zero value otherwise.
func (o *ServerInfo) GetKartVars() float32 {
	if o == nil || o.KartVars == nil {
		var ret float32
		return ret
	}
	return *o.KartVars
}

// GetKartVarsOk returns a tuple with the KartVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetKartVarsOk() (*float32, bool) {
	if o == nil || o.KartVars == nil {
		return nil, false
	}
	return o.KartVars, true
}

// HasKartVars returns a boolean if a field has been set.
func (o *ServerInfo) HasKartVars() bool {
	if o != nil && o.KartVars != nil {
		return true
	}

	return false
}

// SetKartVars gets a reference to the given float32 and assigns it to the KartVars field.
func (o *ServerInfo) SetKartVars(v float32) {
	o.KartVars = &v
}

// GetFileNeededNum returns the FileNeededNum field value if set, zero value otherwise.
func (o *ServerInfo) GetFileNeededNum() float32 {
	if o == nil || o.FileNeededNum == nil {
		var ret float32
		return ret
	}
	return *o.FileNeededNum
}

// GetFileNeededNumOk returns a tuple with the FileNeededNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetFileNeededNumOk() (*float32, bool) {
	if o == nil || o.FileNeededNum == nil {
		return nil, false
	}
	return o.FileNeededNum, true
}

// HasFileNeededNum returns a boolean if a field has been set.
func (o *ServerInfo) HasFileNeededNum() bool {
	if o != nil && o.FileNeededNum != nil {
		return true
	}

	return false
}

// SetFileNeededNum gets a reference to the given float32 and assigns it to the FileNeededNum field.
func (o *ServerInfo) SetFileNeededNum(v float32) {
	o.FileNeededNum = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ServerInfo) GetTime() float32 {
	if o == nil || o.Time == nil {
		var ret float32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetTimeOk() (*float32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ServerInfo) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given float32 and assigns it to the Time field.
func (o *ServerInfo) SetTime(v float32) {
	o.Time = &v
}

// GetLevelTime returns the LevelTime field value if set, zero value otherwise.
func (o *ServerInfo) GetLevelTime() float32 {
	if o == nil || o.LevelTime == nil {
		var ret float32
		return ret
	}
	return *o.LevelTime
}

// GetLevelTimeOk returns a tuple with the LevelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetLevelTimeOk() (*float32, bool) {
	if o == nil || o.LevelTime == nil {
		return nil, false
	}
	return o.LevelTime, true
}

// HasLevelTime returns a boolean if a field has been set.
func (o *ServerInfo) HasLevelTime() bool {
	if o != nil && o.LevelTime != nil {
		return true
	}

	return false
}

// SetLevelTime gets a reference to the given float32 and assigns it to the LevelTime field.
func (o *ServerInfo) SetLevelTime(v float32) {
	o.LevelTime = &v
}

// GetServerNameRaw returns the ServerNameRaw field value if set, zero value otherwise.
func (o *ServerInfo) GetServerNameRaw() string {
	if o == nil || o.ServerNameRaw == nil {
		var ret string
		return ret
	}
	return *o.ServerNameRaw
}

// GetServerNameRawOk returns a tuple with the ServerNameRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetServerNameRawOk() (*string, bool) {
	if o == nil || o.ServerNameRaw == nil {
		return nil, false
	}
	return o.ServerNameRaw, true
}

// HasServerNameRaw returns a boolean if a field has been set.
func (o *ServerInfo) HasServerNameRaw() bool {
	if o != nil && o.ServerNameRaw != nil {
		return true
	}

	return false
}

// SetServerNameRaw gets a reference to the given string and assigns it to the ServerNameRaw field.
func (o *ServerInfo) SetServerNameRaw(v string) {
	o.ServerNameRaw = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *ServerInfo) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *ServerInfo) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *ServerInfo) SetServerName(v string) {
	o.ServerName = &v
}

// GetMapName returns the MapName field value if set, zero value otherwise.
func (o *ServerInfo) GetMapName() string {
	if o == nil || o.MapName == nil {
		var ret string
		return ret
	}
	return *o.MapName
}

// GetMapNameOk returns a tuple with the MapName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetMapNameOk() (*string, bool) {
	if o == nil || o.MapName == nil {
		return nil, false
	}
	return o.MapName, true
}

// HasMapName returns a boolean if a field has been set.
func (o *ServerInfo) HasMapName() bool {
	if o != nil && o.MapName != nil {
		return true
	}

	return false
}

// SetMapName gets a reference to the given string and assigns it to the MapName field.
func (o *ServerInfo) SetMapName(v string) {
	o.MapName = &v
}

// GetMapTitle returns the MapTitle field value if set, zero value otherwise.
func (o *ServerInfo) GetMapTitle() string {
	if o == nil || o.MapTitle == nil {
		var ret string
		return ret
	}
	return *o.MapTitle
}

// GetMapTitleOk returns a tuple with the MapTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetMapTitleOk() (*string, bool) {
	if o == nil || o.MapTitle == nil {
		return nil, false
	}
	return o.MapTitle, true
}

// HasMapTitle returns a boolean if a field has been set.
func (o *ServerInfo) HasMapTitle() bool {
	if o != nil && o.MapTitle != nil {
		return true
	}

	return false
}

// SetMapTitle gets a reference to the given string and assigns it to the MapTitle field.
func (o *ServerInfo) SetMapTitle(v string) {
	o.MapTitle = &v
}

// GetMapMD5 returns the MapMD5 field value if set, zero value otherwise.
func (o *ServerInfo) GetMapMD5() []float32 {
	if o == nil || o.MapMD5 == nil {
		var ret []float32
		return ret
	}
	return o.MapMD5
}

// GetMapMD5Ok returns a tuple with the MapMD5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetMapMD5Ok() ([]float32, bool) {
	if o == nil || o.MapMD5 == nil {
		return nil, false
	}
	return o.MapMD5, true
}

// HasMapMD5 returns a boolean if a field has been set.
func (o *ServerInfo) HasMapMD5() bool {
	if o != nil && o.MapMD5 != nil {
		return true
	}

	return false
}

// SetMapMD5 gets a reference to the given []float32 and assigns it to the MapMD5 field.
func (o *ServerInfo) SetMapMD5(v []float32) {
	o.MapMD5 = v
}

// GetActNum returns the ActNum field value if set, zero value otherwise.
func (o *ServerInfo) GetActNum() float32 {
	if o == nil || o.ActNum == nil {
		var ret float32
		return ret
	}
	return *o.ActNum
}

// GetActNumOk returns a tuple with the ActNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetActNumOk() (*float32, bool) {
	if o == nil || o.ActNum == nil {
		return nil, false
	}
	return o.ActNum, true
}

// HasActNum returns a boolean if a field has been set.
func (o *ServerInfo) HasActNum() bool {
	if o != nil && o.ActNum != nil {
		return true
	}

	return false
}

// SetActNum gets a reference to the given float32 and assigns it to the ActNum field.
func (o *ServerInfo) SetActNum(v float32) {
	o.ActNum = &v
}

// GetIsZone returns the IsZone field value if set, zero value otherwise.
func (o *ServerInfo) GetIsZone() float32 {
	if o == nil || o.IsZone == nil {
		var ret float32
		return ret
	}
	return *o.IsZone
}

// GetIsZoneOk returns a tuple with the IsZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetIsZoneOk() (*float32, bool) {
	if o == nil || o.IsZone == nil {
		return nil, false
	}
	return o.IsZone, true
}

// HasIsZone returns a boolean if a field has been set.
func (o *ServerInfo) HasIsZone() bool {
	if o != nil && o.IsZone != nil {
		return true
	}

	return false
}

// SetIsZone gets a reference to the given float32 and assigns it to the IsZone field.
func (o *ServerInfo) SetIsZone(v float32) {
	o.IsZone = &v
}

// GetHttpSource returns the HttpSource field value if set, zero value otherwise.
func (o *ServerInfo) GetHttpSource() string {
	if o == nil || o.HttpSource == nil {
		var ret string
		return ret
	}
	return *o.HttpSource
}

// GetHttpSourceOk returns a tuple with the HttpSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetHttpSourceOk() (*string, bool) {
	if o == nil || o.HttpSource == nil {
		return nil, false
	}
	return o.HttpSource, true
}

// HasHttpSource returns a boolean if a field has been set.
func (o *ServerInfo) HasHttpSource() bool {
	if o != nil && o.HttpSource != nil {
		return true
	}

	return false
}

// SetHttpSource gets a reference to the given string and assigns it to the HttpSource field.
func (o *ServerInfo) SetHttpSource(v string) {
	o.HttpSource = &v
}

// GetFileNeeded returns the FileNeeded field value if set, zero value otherwise.
func (o *ServerInfo) GetFileNeeded() []FileNeededInner {
	if o == nil || o.FileNeeded == nil {
		var ret []FileNeededInner
		return ret
	}
	return o.FileNeeded
}

// GetFileNeededOk returns a tuple with the FileNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetFileNeededOk() ([]FileNeededInner, bool) {
	if o == nil || o.FileNeeded == nil {
		return nil, false
	}
	return o.FileNeeded, true
}

// HasFileNeeded returns a boolean if a field has been set.
func (o *ServerInfo) HasFileNeeded() bool {
	if o != nil && o.FileNeeded != nil {
		return true
	}

	return false
}

// SetFileNeeded gets a reference to the given []FileNeededInner and assigns it to the FileNeeded field.
func (o *ServerInfo) SetFileNeeded(v []FileNeededInner) {
	o.FileNeeded = v
}

func (o ServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PacketVersion != nil {
		toSerialize["PacketVersion"] = o.PacketVersion
	}
	if o.Application != nil {
		toSerialize["Application"] = o.Application
	}
	if o.Version != nil {
		toSerialize["Version"] = o.Version
	}
	if o.SubVersion != nil {
		toSerialize["SubVersion"] = o.SubVersion
	}
	if o.NumberOfPlayer != nil {
		toSerialize["NumberOfPlayer"] = o.NumberOfPlayer
	}
	if o.MaxPlayers != nil {
		toSerialize["MaxPlayers"] = o.MaxPlayers
	}
	if o.GameType != nil {
		toSerialize["GameType"] = o.GameType
	}
	if o.ModifiedGame != nil {
		toSerialize["ModifiedGame"] = o.ModifiedGame
	}
	if o.CheatsEnabled != nil {
		toSerialize["CheatsEnabled"] = o.CheatsEnabled
	}
	if o.KartVars != nil {
		toSerialize["KartVars"] = o.KartVars
	}
	if o.FileNeededNum != nil {
		toSerialize["FileNeededNum"] = o.FileNeededNum
	}
	if o.Time != nil {
		toSerialize["Time"] = o.Time
	}
	if o.LevelTime != nil {
		toSerialize["LevelTime"] = o.LevelTime
	}
	if o.ServerNameRaw != nil {
		toSerialize["ServerNameRaw"] = o.ServerNameRaw
	}
	if o.ServerName != nil {
		toSerialize["ServerName"] = o.ServerName
	}
	if o.MapName != nil {
		toSerialize["MapName"] = o.MapName
	}
	if o.MapTitle != nil {
		toSerialize["MapTitle"] = o.MapTitle
	}
	if o.MapMD5 != nil {
		toSerialize["MapMD5"] = o.MapMD5
	}
	if o.ActNum != nil {
		toSerialize["ActNum"] = o.ActNum
	}
	if o.IsZone != nil {
		toSerialize["IsZone"] = o.IsZone
	}
	if o.HttpSource != nil {
		toSerialize["HttpSource"] = o.HttpSource
	}
	if o.FileNeeded != nil {
		toSerialize["FileNeeded"] = o.FileNeeded
	}
	return json.Marshal(toSerialize)
}

type NullableServerInfo struct {
	value *ServerInfo
	isSet bool
}

func (v NullableServerInfo) Get() *ServerInfo {
	return v.value
}

func (v *NullableServerInfo) Set(val *ServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInfo(val *ServerInfo) *NullableServerInfo {
	return &NullableServerInfo{value: val, isSet: true}
}

func (v NullableServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


