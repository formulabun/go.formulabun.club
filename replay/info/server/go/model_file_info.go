/*
 * GoBun Replay File Info
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type FileInfo struct {

	DemoHeader string `json:"DemoHeader,omitempty"`

	Version int32 `json:"Version,omitempty"`

	SubVersion int32 `json:"SubVersion,omitempty"`

	DemoVersion int32 `json:"DemoVersion,omitempty"`

	Title string `json:"Title,omitempty"`

	Checksum []int32 `json:"Checksum,omitempty"`

	Play string `json:"Play,omitempty"`

	GameMap int32 `json:"GameMap,omitempty"`

	MapMd5 []int32 `json:"MapMd5,omitempty"`

	DemoFlags int32 `json:"DemoFlags,omitempty"`

	GameType int32 `json:"GameType,omitempty"`

	FileCount int32 `json:"FileCount,omitempty"`

	Wads []WadEntry `json:"Wads,omitempty"`

	// Total time in nanoseconds
	Time int32 `json:"Time,omitempty"`

	// Best lap time in nanoseconds
	BestLapTime int32 `json:"BestLapTime,omitempty"`

	Seed int32 `json:"Seed,omitempty"`

	CVarCount int32 `json:"CVarCount,omitempty"`

	Cvars []CVarEntry `json:"Cvars,omitempty"`

	Players []PlayerEntry `json:"Players,omitempty"`
}

// AssertFileInfoRequired checks if the required fields are not zero-ed
func AssertFileInfoRequired(obj FileInfo) error {
	for _, el := range obj.Wads {
		if err := AssertWadEntryRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Cvars {
		if err := AssertCVarEntryRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Players {
		if err := AssertPlayerEntryRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseFileInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of FileInfo (e.g. [][]FileInfo), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFileInfoRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFileInfo, ok := obj.(FileInfo)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFileInfoRequired(aFileInfo)
	})
}
