/*
 * GoBun File Store
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/hex"
	"fmt"
	"io"
	"net/http"
	"os"

	"go.formulabun.club/functional/array"
	"go.formulabun.club/srb2kart/lump"
)

// DefaultApiService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// ListGet - Get the list of replay files
func (s *DefaultApiService) ListGet(ctx context.Context) (ImplResponse, error) {
	entries, err := os.ReadDir("/data")
	if err != nil {
		return Response(http.StatusInternalServerError, err), err
	}

	files := array.Map(entries, func(entry os.DirEntry) string {
		return entry.Name()
	})

	return Response(http.StatusOK, files), nil
}

// RootPost - Upload a new replay file
func (s *DefaultApiService) RootPost(ctx context.Context, data io.ReadCloser) (ImplResponse, error) {
	header, err := lump.ReadReplay(data)
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	replayMd5 := hex.EncodeToString(header.Checksum[:])
	fileName := fmt.Sprintf("/data/%s", replayMd5)
	_, err = os.Stat(fileName)
	if err == nil {
		return Response(http.StatusConflict, "File already exists"), nil
	}

	file, err := os.Create(fileName)
	if err != nil {
		return Response(http.StatusInternalServerError, err), err
	}

	err = header.Write(file)
	if err != nil {
		return Response(http.StatusInternalServerError, err), fmt.Errorf("Could not write the replay file: %s", err)
	}

	_, err = io.Copy(file, data)
	if err != nil {
		return Response(http.StatusInternalServerError, err), fmt.Errorf("Could not write the replay file: %s", err)
	}

	return Response(http.StatusOK, _), nil
}
